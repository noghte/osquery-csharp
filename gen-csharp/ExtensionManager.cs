/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ExtensionManager {
  public interface ISync : Extension.ISync {
    Dictionary<long, InternalExtensionInfo> extensions();
    Dictionary<string, InternalOptionInfo> options();
    ExtensionStatus registerExtension(InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry);
    ExtensionStatus deregisterExtension(long uuid);
    ExtensionResponse query(string sql);
    ExtensionResponse getQueryColumns(string sql);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_extensions(AsyncCallback callback, object state);
    Dictionary<long, InternalExtensionInfo> End_extensions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_options(AsyncCallback callback, object state);
    Dictionary<string, InternalOptionInfo> End_options(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerExtension(AsyncCallback callback, object state, InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry);
    ExtensionStatus End_registerExtension(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deregisterExtension(AsyncCallback callback, object state, long uuid);
    ExtensionStatus End_deregisterExtension(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_query(AsyncCallback callback, object state, string sql);
    ExtensionResponse End_query(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getQueryColumns(AsyncCallback callback, object state, string sql);
    ExtensionResponse End_getQueryColumns(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Extension.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_extensions(AsyncCallback callback, object state)
    {
      return send_extensions(callback, state);
    }

    public Dictionary<long, InternalExtensionInfo> End_extensions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_extensions();
    }

    #endif

    public Dictionary<long, InternalExtensionInfo> extensions()
    {
      #if !SILVERLIGHT
      send_extensions();
      return recv_extensions();

      #else
      var asyncResult = Begin_extensions(null, null);
      return End_extensions(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_extensions(AsyncCallback callback, object state)
    #else
    public void send_extensions()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("extensions", TMessageType.Call, seqid_));
      extensions_args args = new extensions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<long, InternalExtensionInfo> recv_extensions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      extensions_result result = new extensions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "extensions failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_options(AsyncCallback callback, object state)
    {
      return send_options(callback, state);
    }

    public Dictionary<string, InternalOptionInfo> End_options(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_options();
    }

    #endif

    public Dictionary<string, InternalOptionInfo> options()
    {
      #if !SILVERLIGHT
      send_options();
      return recv_options();

      #else
      var asyncResult = Begin_options(null, null);
      return End_options(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_options(AsyncCallback callback, object state)
    #else
    public void send_options()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("options", TMessageType.Call, seqid_));
      options_args args = new options_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, InternalOptionInfo> recv_options()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      options_result result = new options_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "options failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_registerExtension(AsyncCallback callback, object state, InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry)
    {
      return send_registerExtension(callback, state, info, registry);
    }

    public ExtensionStatus End_registerExtension(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerExtension();
    }

    #endif

    public ExtensionStatus registerExtension(InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry)
    {
      #if !SILVERLIGHT
      send_registerExtension(info, registry);
      return recv_registerExtension();

      #else
      var asyncResult = Begin_registerExtension(null, null, info, registry);
      return End_registerExtension(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerExtension(AsyncCallback callback, object state, InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry)
    #else
    public void send_registerExtension(InternalExtensionInfo info, Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> registry)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("registerExtension", TMessageType.Call, seqid_));
      registerExtension_args args = new registerExtension_args();
      args.Info = info;
      args.Registry = registry;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ExtensionStatus recv_registerExtension()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerExtension_result result = new registerExtension_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerExtension failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deregisterExtension(AsyncCallback callback, object state, long uuid)
    {
      return send_deregisterExtension(callback, state, uuid);
    }

    public ExtensionStatus End_deregisterExtension(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deregisterExtension();
    }

    #endif

    public ExtensionStatus deregisterExtension(long uuid)
    {
      #if !SILVERLIGHT
      send_deregisterExtension(uuid);
      return recv_deregisterExtension();

      #else
      var asyncResult = Begin_deregisterExtension(null, null, uuid);
      return End_deregisterExtension(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deregisterExtension(AsyncCallback callback, object state, long uuid)
    #else
    public void send_deregisterExtension(long uuid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deregisterExtension", TMessageType.Call, seqid_));
      deregisterExtension_args args = new deregisterExtension_args();
      args.Uuid = uuid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ExtensionStatus recv_deregisterExtension()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deregisterExtension_result result = new deregisterExtension_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deregisterExtension failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_query(AsyncCallback callback, object state, string sql)
    {
      return send_query(callback, state, sql);
    }

    public ExtensionResponse End_query(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_query();
    }

    #endif

    public ExtensionResponse query(string sql)
    {
      #if !SILVERLIGHT
      send_query(sql);
      return recv_query();

      #else
      var asyncResult = Begin_query(null, null, sql);
      return End_query(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_query(AsyncCallback callback, object state, string sql)
    #else
    public void send_query(string sql)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("query", TMessageType.Call, seqid_));
      query_args args = new query_args();
      args.Sql = sql;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ExtensionResponse recv_query()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      query_result result = new query_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "query failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getQueryColumns(AsyncCallback callback, object state, string sql)
    {
      return send_getQueryColumns(callback, state, sql);
    }

    public ExtensionResponse End_getQueryColumns(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getQueryColumns();
    }

    #endif

    public ExtensionResponse getQueryColumns(string sql)
    {
      #if !SILVERLIGHT
      send_getQueryColumns(sql);
      return recv_getQueryColumns();

      #else
      var asyncResult = Begin_getQueryColumns(null, null, sql);
      return End_getQueryColumns(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getQueryColumns(AsyncCallback callback, object state, string sql)
    #else
    public void send_getQueryColumns(string sql)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getQueryColumns", TMessageType.Call, seqid_));
      getQueryColumns_args args = new getQueryColumns_args();
      args.Sql = sql;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ExtensionResponse recv_getQueryColumns()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getQueryColumns_result result = new getQueryColumns_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getQueryColumns failed: unknown result");
    }

  }
  public class Processor : Extension.Processor, TProcessor {
    public Processor(ISync iface) : base(iface)
    {
      iface_ = iface;
      processMap_["extensions"] = extensions_Process;
      processMap_["options"] = options_Process;
      processMap_["registerExtension"] = registerExtension_Process;
      processMap_["deregisterExtension"] = deregisterExtension_Process;
      processMap_["query"] = query_Process;
      processMap_["getQueryColumns"] = getQueryColumns_Process;
    }

    private ISync iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void extensions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      extensions_args args = new extensions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      extensions_result result = new extensions_result();
      try
      {
        result.Success = iface_.extensions();
        oprot.WriteMessageBegin(new TMessage("extensions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("extensions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void options_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      options_args args = new options_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      options_result result = new options_result();
      try
      {
        result.Success = iface_.options();
        oprot.WriteMessageBegin(new TMessage("options", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("options", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerExtension_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerExtension_args args = new registerExtension_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerExtension_result result = new registerExtension_result();
      try
      {
        result.Success = iface_.registerExtension(args.Info, args.Registry);
        oprot.WriteMessageBegin(new TMessage("registerExtension", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerExtension", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deregisterExtension_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deregisterExtension_args args = new deregisterExtension_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deregisterExtension_result result = new deregisterExtension_result();
      try
      {
        result.Success = iface_.deregisterExtension(args.Uuid);
        oprot.WriteMessageBegin(new TMessage("deregisterExtension", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deregisterExtension", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void query_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      query_args args = new query_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      query_result result = new query_result();
      try
      {
        result.Success = iface_.query(args.Sql);
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getQueryColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getQueryColumns_args args = new getQueryColumns_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getQueryColumns_result result = new getQueryColumns_result();
      try
      {
        result.Success = iface_.getQueryColumns(args.Sql);
        oprot.WriteMessageBegin(new TMessage("getQueryColumns", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getQueryColumns", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class extensions_args : TBase
  {

    public extensions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("extensions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("extensions_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class extensions_result : TBase
  {
    private Dictionary<long, InternalExtensionInfo> _success;

    public Dictionary<long, InternalExtensionInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public extensions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, InternalExtensionInfo>();
                  TMap _map14 = iprot.ReadMapBegin();
                  for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                  {
                    long _key16;
                    InternalExtensionInfo _val17;
                    _key16 = iprot.ReadI64();
                    _val17 = new InternalExtensionInfo();
                    _val17.Read(iprot);
                    Success[_key16] = _val17;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("extensions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
              foreach (long _iter18 in Success.Keys)
              {
                oprot.WriteI64(_iter18);
                Success[_iter18].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("extensions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class options_args : TBase
  {

    public options_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("options_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("options_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class options_result : TBase
  {
    private Dictionary<string, InternalOptionInfo> _success;

    public Dictionary<string, InternalOptionInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public options_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, InternalOptionInfo>();
                  TMap _map19 = iprot.ReadMapBegin();
                  for( int _i20 = 0; _i20 < _map19.Count; ++_i20)
                  {
                    string _key21;
                    InternalOptionInfo _val22;
                    _key21 = iprot.ReadString();
                    _val22 = new InternalOptionInfo();
                    _val22.Read(iprot);
                    Success[_key21] = _val22;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("options_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter23 in Success.Keys)
              {
                oprot.WriteString(_iter23);
                Success[_iter23].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("options_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerExtension_args : TBase
  {
    private InternalExtensionInfo _info;
    private Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> _registry;

    public InternalExtensionInfo Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }

    public Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>> Registry
    {
      get
      {
        return _registry;
      }
      set
      {
        __isset.registry = true;
        this._registry = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool info;
      public bool registry;
    }

    public registerExtension_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new InternalExtensionInfo();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Registry = new Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>>();
                  TMap _map24 = iprot.ReadMapBegin();
                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                  {
                    string _key26;
                    Dictionary<string, List<Dictionary<string, string>>> _val27;
                    _key26 = iprot.ReadString();
                    {
                      _val27 = new Dictionary<string, List<Dictionary<string, string>>>();
                      TMap _map28 = iprot.ReadMapBegin();
                      for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                      {
                        string _key30;
                        List<Dictionary<string, string>> _val31;
                        _key30 = iprot.ReadString();
                        {
                          _val31 = new List<Dictionary<string, string>>();
                          TList _list32 = iprot.ReadListBegin();
                          for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                          {
                            Dictionary<string, string> _elem34;
                            {
                              _elem34 = new Dictionary<string, string>();
                              TMap _map35 = iprot.ReadMapBegin();
                              for( int _i36 = 0; _i36 < _map35.Count; ++_i36)
                              {
                                string _key37;
                                string _val38;
                                _key37 = iprot.ReadString();
                                _val38 = iprot.ReadString();
                                _elem34[_key37] = _val38;
                              }
                              iprot.ReadMapEnd();
                            }
                            _val31.Add(_elem34);
                          }
                          iprot.ReadListEnd();
                        }
                        _val27[_key30] = _val31;
                      }
                      iprot.ReadMapEnd();
                    }
                    Registry[_key26] = _val27;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerExtension_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Registry != null && __isset.registry) {
          field.Name = "registry";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Registry.Count));
            foreach (string _iter39 in Registry.Keys)
            {
              oprot.WriteString(_iter39);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.List, Registry[_iter39].Count));
                foreach (string _iter40 in Registry[_iter39].Keys)
                {
                  oprot.WriteString(_iter40);
                  {
                    oprot.WriteListBegin(new TList(TType.Map, Registry[_iter39][_iter40].Count));
                    foreach (Dictionary<string, string> _iter41 in Registry[_iter39][_iter40])
                    {
                      {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter41.Count));
                        foreach (string _iter42 in _iter41.Keys)
                        {
                          oprot.WriteString(_iter42);
                          oprot.WriteString(_iter41[_iter42]);
                        }
                        oprot.WriteMapEnd();
                      }
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerExtension_args(");
      bool __first = true;
      if (Info != null && __isset.info) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Info: ");
        __sb.Append(Info== null ? "<null>" : Info.ToString());
      }
      if (Registry != null && __isset.registry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Registry: ");
        __sb.Append(Registry);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerExtension_result : TBase
  {
    private ExtensionStatus _success;

    public ExtensionStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public registerExtension_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ExtensionStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerExtension_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerExtension_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deregisterExtension_args : TBase
  {
    private long _uuid;

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
    }

    public deregisterExtension_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Uuid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deregisterExtension_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uuid) {
          field.Name = "uuid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Uuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deregisterExtension_args(");
      bool __first = true;
      if (__isset.uuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uuid: ");
        __sb.Append(Uuid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deregisterExtension_result : TBase
  {
    private ExtensionStatus _success;

    public ExtensionStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deregisterExtension_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ExtensionStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deregisterExtension_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deregisterExtension_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class query_args : TBase
  {
    private string _sql;

    public string Sql
    {
      get
      {
        return _sql;
      }
      set
      {
        __isset.sql = true;
        this._sql = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sql;
    }

    public query_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("query_args(");
      bool __first = true;
      if (Sql != null && __isset.sql) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sql: ");
        __sb.Append(Sql);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class query_result : TBase
  {
    private ExtensionResponse _success;

    public ExtensionResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public query_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ExtensionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("query_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getQueryColumns_args : TBase
  {
    private string _sql;

    public string Sql
    {
      get
      {
        return _sql;
      }
      set
      {
        __isset.sql = true;
        this._sql = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sql;
    }

    public getQueryColumns_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getQueryColumns_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getQueryColumns_args(");
      bool __first = true;
      if (Sql != null && __isset.sql) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sql: ");
        __sb.Append(Sql);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getQueryColumns_result : TBase
  {
    private ExtensionResponse _success;

    public ExtensionResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getQueryColumns_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ExtensionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getQueryColumns_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getQueryColumns_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
